import re
import os
import io
import streamlit as st
import pandas as pd
import plotly.express as px
from openai import OpenAI
from clickhouse_client import ClickHouse_client
import retriever
import sys
import subprocess
import importlib, prompts
import plotly.graph_objects as go
import polars as pl
from datetime import datetime
import zipfile                 # –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ ZIP
import plotly.io as pio        # –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –≤ HTML

importlib.reload(prompts)             # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é —Ñ–∞–π–ª–∞ prompts.py
SYSTEM_PROMPT = prompts.CHAT_SYSTEM_PROMPT

def _parse_spec_block(spec: str) -> dict:
    params = {}
    for line in spec.splitlines():
        if ":" in line:
            k, v = line.split(":", 1)
            params[k.strip().lower()] = v.strip()
    return params

# –ü—É—Ç–∏/–∏–º–µ–Ω–∞ –¥–ª—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π (ChromaDB)
CHROMA_PATH = os.getenv("KB_CHROMA_PATH", "data/chroma")
COLLECTION_NAME = os.getenv("KB_COLLECTION_NAME", "kb_docs")

st.set_page_config(page_title="AI SQL Assistant", page_icon="üí¨")

api_key = os.getenv("OPENAI_API_KEY")
if not api_key:
    st.error("OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω")
    st.stop()
client = OpenAI(api_key=api_key)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª—é—á–µ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è.
st.session_state.setdefault("messages", [])
st.session_state.setdefault("last_df", None)
st.session_state.setdefault("last_pivot", None)
st.session_state.setdefault("results", []) # –∏—Å—Ç–æ—Ä–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (—Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
st.session_state.setdefault("run_counter", 0) # —Å—á—ë—Ç—á–∏–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö id –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

# ---------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/—Ä–µ–Ω–¥–µ—Ä–∞ ----------

def _df_to_csv_bytes(pdf: pd.DataFrame) -> bytes:
    buf = io.BytesIO()
    pdf.to_csv(buf, index=False)
    return buf.getvalue()

def _df_to_xlsx_bytes(pdf: pd.DataFrame, sheet_name: str = "Sheet1") -> bytes:
    buf = io.BytesIO()
    with pd.ExcelWriter(buf, engine="openpyxl") as writer:
        pdf.to_excel(writer, index=False, sheet_name=sheet_name[:31])
    buf.seek(0)
    return buf.getvalue()

def _fig_to_html_bytes(fig) -> bytes:
    html = pio.to_html(fig, include_plotlyjs="cdn", full_html=True)
    return html.encode("utf-8")

def _push_result(kind: str, *, df_pl: pl.DataFrame | None = None, fig=None, meta: dict | None = None):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é.
    kind: "table" | "pivot" | "chart"
    df_pl: polars DataFrame –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –±–ª–æ–∫–∞
    fig: plotly Figure –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
    meta: –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–∞—è –º–µ—Ç–∞ (sql, note, –∏ —Ç.–ø.)
    """
    st.session_state["run_counter"] += 1
    item = {
        "id": st.session_state["run_counter"],
        "timestamp": datetime.now().isoformat(timespec="seconds"),
        "kind": kind,
        "meta": meta or {},
    }
    if df_pl is not None:
        item["df"] = df_pl  # —Ö—Ä–∞–Ω–∏–º –∫–∞–∫ polars; –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ/—Ä–µ–Ω–¥–µ—Ä
    if fig is not None:
        item["fig"] = fig
    st.session_state["results"].append(item)

def _render_result(item):
    """–†–∏—Å—É–µ–º –æ–¥–∏–Ω –±–ª–æ–∫ –∏—Å—Ç–æ—Ä–∏–∏ + –∫–Ω–æ–ø–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è."""
    kind = item["kind"]
    meta = item.get("meta", {})
    title = {
        "table": "–¢–∞–±–ª–∏—Ü–∞",
        "pivot": "–°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞",
        "chart": "–ì—Ä–∞—Ñ–∏–∫",
    }.get(kind, "–†–µ–∑—É–ª—å—Ç–∞—Ç")

    with st.container(border=True):
        st.caption(f"{title} ‚Ä¢ #{item['id']} ‚Ä¢ {item['timestamp']}")

        if "df" in item and item["df"] is not None:
            pdf = item["df"].to_pandas()
            st.dataframe(pdf, use_container_width=True)

            col1, col2 = st.columns(2)
            with col1:
                st.download_button(
                    "–°–∫–∞—á–∞—Ç—å CSV",
                    _df_to_csv_bytes(pdf),
                    file_name=f"{title.lower()}_{item['id']}.csv",
                    mime="text/csv",
                    use_container_width=True,
                )
            with col2:
                st.download_button(
                    "–°–∫–∞—á–∞—Ç—å Excel",
                    _df_to_xlsx_bytes(pdf, sheet_name=f"{title[:25]}"),
                    file_name=f"{title.lower()}_{item['id']}.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    use_container_width=True,
                )

        if "fig" in item and item["fig"] is not None:
            st.plotly_chart(item["fig"], use_container_width=True)
            st.download_button(
                "–°–∫–∞—á–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ (HTML)",
                _fig_to_html_bytes(item["fig"]),
                file_name=f"chart_{item['id']}.html",
                mime="text/html",
                use_container_width=True,
            )

        # –ø–æ–ª–µ–∑–Ω–æ –ø–æ–¥—Å–≤–µ—Ç–∏—Ç—å SQL –∏–ª–∏ –∑–∞–º–µ—Ç–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å
        if meta.get("sql"):
            with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å SQL"):
                st.code(meta["sql"], language="sql")

# --- –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π (RAG) ---
with st.sidebar:
    st.header("–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π (RAG)")
    st.caption(f"–ö–æ–ª–ª–µ–∫—Ü–∏—è: {COLLECTION_NAME!r} ¬∑ –ü—É—Ç—å: {CHROMA_PATH!r}")

    if st.button("–ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å docs/"):
        with st.status("–ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã‚Ä¶", expanded=True) as status:
            env = os.environ.copy()
            env["KB_COLLECTION_NAME"] = COLLECTION_NAME
            env["KB_CHROMA_PATH"] = CHROMA_PATH
            proc = subprocess.run([sys.executable, "ingest.py"],
                                capture_output=True, text=True, env=env)
            st.code(proc.stdout or "(–Ω–µ—Ç stdout)")
            if proc.returncode == 0:
                status.update(label="–ì–æ—Ç–æ–≤–æ", state="complete")
            else:
                st.error(proc.stderr)
    st.header("–≠–∫—Å–ø–æ—Ä—Ç")
    if not st.session_state["results"]:
        st.caption("–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
    else:
        # –°–æ–±–∏—Ä–∞–µ–º ZIP —Ü–µ–ª–∏–∫–æ–º –≤ –ø–∞–º—è—Ç—å
        zip_buf = io.BytesIO()
        with zipfile.ZipFile(zip_buf, mode="w", compression=zipfile.ZIP_DEFLATED) as zf:
            for item in st.session_state["results"]:
                base = f"{item['kind']}_{item['id']}"
                # –¥–∞–Ω–Ω—ã–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                if item.get("df") is not None:
                    pdf = item["df"].to_pandas()
                    zf.writestr(f"{base}.csv", _df_to_csv_bytes(pdf))
                    zf.writestr(f"{base}.xlsx", _df_to_xlsx_bytes(pdf, sheet_name=item['kind'][:31]))
                # –≥—Ä–∞—Ñ–∏–∫ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                if item.get("fig") is not None:
                    zf.writestr(f"{base}.html", _fig_to_html_bytes(item["fig"]))
                # SQL (–∫–∞–∫ —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å)
                sql = (item.get("meta") or {}).get("sql")
                if sql:
                    zf.writestr(f"{base}.sql.txt", sql.encode("utf-8"))
        zip_buf.seek(0)

        st.download_button(
            "–°–∫–∞—á–∞—Ç—å –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (ZIP)",
            data=zip_buf.getvalue(),
            file_name="results_export.zip",
            mime="application/zip",
            use_container_width=True,
        )

        # –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –æ–¥–Ω–∏–º Excel (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ª–∏—Å—Ç—ã)
        if any(item.get("df") is not None for item in st.session_state["results"]):
            xlsx_buf = io.BytesIO()
            with pd.ExcelWriter(xlsx_buf, engine="openpyxl") as writer:
                for item in st.session_state["results"]:
                    if item.get("df") is not None:
                        pdf = item["df"].to_pandas()
                        sheet = f"{item['kind']}_{item['id']}"[:31]  # Excel-–ª–∏–º–∏—Ç –Ω–∞ –∏–º—è –ª–∏—Å—Ç–∞
                        pdf.to_excel(writer, sheet_name=sheet, index=False)
            xlsx_buf.seek(0)
            st.download_button(
                "–°–∫–∞—á–∞—Ç—å –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã (Excel)",
                xlsx_buf.getvalue(),
                "results.xlsx",
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                use_container_width=True,
                )

    if st.button("–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"):
        st.session_state["results"].clear()
        st.session_state["run_counter"] = 0
        st.session_state["last_df"] = None
        st.session_state["last_pivot"] = None
        st.experimental_rerun()

# –†–µ–Ω–¥–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
for m in st.session_state.messages:
    with st.chat_message(m["role"]):
        st.markdown(m["content"])

# –†–µ–Ω–¥–µ—Ä –≤—Å–µ—Ö –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (—Ç–∞–±–ª–∏—Ü—ã/—Å–≤–æ–¥–Ω—ã–µ/–≥—Ä–∞—Ñ–∏–∫–∏)
if st.session_state["results"]:
    st.markdown("### –ò—Å—Ç–æ—Ä–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    for item in st.session_state["results"]:
        _render_result(item)

user_input = st.chat_input("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å...")
# –§–∏–∫—Å–∏—Ä—É–µ—Ç —Ö–æ–¥ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∏ –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –µ–≥–æ –≤ UI
if user_input:
    st.session_state.messages.append({"role": "user", "content": user_input})
    with st.chat_message("user"):
        st.markdown(user_input)
    #–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ st.session_state.messages (–≥–ª–æ–±–∞–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞), 
    # –∏ –≤—ã–≤–æ–¥–∏—Ç—Å—è –ø—É–∑—ã—Ä—ë–º ‚Äúuser‚Äù –≤ Streamlit. –≠—Ç–∞ –∏—Å—Ç–æ—Ä–∏—è –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –¥–ª—è LLM

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –≤ LLM
    msgs = [{"role": "system", "content": SYSTEM_PROMPT}] + st.session_state.messages
    #–≤—ã–∑—ã–≤–∞–µ—Ç gpt-4o –∏ –ø–æ–ª—É—á–∞–µ—Ç —á–µ—Ä–Ω–æ–≤–æ–π –æ—Ç–≤–µ—Ç
    resp = client.chat.completions.create(
        model="gpt-4o",
        messages=msgs,
        temperature=0.2,
    )
    reply = resp.choices[0].message.content

    # --- –°–Ω–∞—á–∞–ª–∞ —Ä–µ—à–∞–µ–º: –Ω—É–∂–µ–Ω –ª–∏ RAG ---
    final_reply = None  # –æ—Ç–≤–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–≤–∏–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã–ø–æ–ª–Ω—è–µ–º SQL/GRAPH

    # 1) –ü—Ä–æ–≤–µ—Ä–∫–∞ RAG (–Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π reply)
    m = re.search(r"```rag\s*(.*?)```", reply, re.DOTALL | re.IGNORECASE)
    if m:
        rag_query = m.group(1).strip()
        try:
            hits = retriever.retrieve(
                rag_query, k=5,
                chroma_path=CHROMA_PATH,
                collection_name=COLLECTION_NAME,
            )
        except Exception as e:
            hits = []
            st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {e}")

        # –°–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç (–ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –¥–ª–∏–Ω—É)
        context = "\n\n".join([h.get("text", "") for h in hits if h.get("text")])

        # –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ LLM —É–∂–µ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        msgs = (
            [{"role": "system", "content": SYSTEM_PROMPT}]
            + st.session_state.messages
            + [{"role": "system", "content": f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π:\n{context}\n–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ —Å—Ç—Ä–æ–≥–æ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É."}]
        )
        rag_resp = client.chat.completions.create(model="gpt-4o", messages=msgs)
        final_reply = rag_resp.choices[0].message.content
    else:
        # RAG –Ω–µ –Ω—É–∂–µ–Ω ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç
        final_reply = reply

    # 2) –¢–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –†–û–í–ù–û –æ–¥–∏–Ω –æ—Ç–≤–µ—Ç –∏ –ø–∏—à–µ–º –µ–≥–æ –≤ –∏—Å—Ç–æ—Ä–∏—é
    st.session_state.messages.append({"role": "assistant", "content": final_reply})
    with st.chat_message("assistant"):
        st.markdown(final_reply)

    # 3) –î–∞–ª—å—à–µ –≤—Å—ë –¥–µ–ª–∞–µ–º –ø–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É –æ—Ç–≤–µ—Ç—É: SQL –∏/–∏–ª–∏ GRAPH
    m_sql = re.search(r"```sql\s*(.*?)```", final_reply, re.DOTALL | re.IGNORECASE)
    if m_sql:
        sql = m_sql.group(1).strip()
        try:
            ch = ClickHouse_client()
            df_pl = ch.query_run(sql)
            st.session_state["last_df"] = df_pl

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            _push_result("table", df_pl=df_pl, meta={"sql": sql})

            # –†–µ–Ω–¥–µ—Ä–∏–º —Ç–æ–ª—å–∫–æ —á—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç (–ø–æ—Å–ª–µ–¥–Ω–∏–π)
            _render_result(st.session_state["results"][-1])

        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ SQL: {e}")

    # if "GRAPH" in final_reply.upper() and st.session_state["last_df"] is not None:
    #     pdf = st.session_state["last_df"].to_pandas()
    #     if not pdf.empty:
    #         col_x, col_y = pdf.columns[:2]
    #         fig = px.line(pdf, x=col_x, y=col_y, markers=True)
    #         st.plotly_chart(fig, use_container_width=True)

    # --- PLOTLY CODE (–≥—Ä–∞—Ñ–∏–∫–∏ –∫–∞–∫ –∫–æ–¥) ---
    m_plotly = re.search(r"```plotly\s*(.*?)```", final_reply, re.DOTALL | re.IGNORECASE)
    if m_plotly:
        if st.session_state["last_df"] is None:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞: —Å–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ SQL, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å df.")
        else:
            code = m_plotly.group(1).strip()
            BANNED_RE = re.compile(
                r"(?:\bimport\b|\bopen\b|\bexec\b|\beval\b|__|subprocess|socket|"
                r"os\.[A-Za-z_]+|sys\.[A-Za-z_]+|Path\(|write\(|remove\(|unlink\(|requests|httpx)",
                re.IGNORECASE,
            )
            if BANNED_RE.search(code):
                st.error("–ö–æ–¥ –≥—Ä–∞—Ñ–∏–∫–∞ –æ—Ç–∫–ª–æ–Ω—ë–Ω (–∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏).")
            else:
                try:
                    df = st.session_state["last_df"].to_pandas()
                    safe_globals = {
                        "__builtins__": {},  # –æ—Ç–∫–ª—é—á–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
                        "pd": pd, "px": px, "go": go, "df": df,
                    }
                    safe_locals = {}
                    exec(code, safe_globals, safe_locals)
                    fig = safe_locals.get("fig") or safe_globals.get("fig")
                    if fig is None:
                        st.error("–ö–æ–¥ –Ω–µ —Å–æ–∑–¥–∞–ª –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é fig.")
                    else:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é (–¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ —Ç–æ–∂–µ –ø–æ–ª–µ–∑–Ω–æ –ø–æ–ª–æ–∂–∏—Ç—å)
                        _push_result("chart", df_pl=st.session_state["last_df"], fig=fig)
                        _render_result(st.session_state["results"][-1])
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")

    
    # --- PIVOT (—Å–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞) ---
    m_pivot = re.search(r"```pivot\s*(.*?)```", final_reply, re.DOTALL | re.IGNORECASE)
    if m_pivot and st.session_state["last_df"] is not None:
        try:
            spec = _parse_spec_block(m_pivot.group(1))
            pdf = st.session_state["last_df"].to_pandas()  # last_df —É –Ω–∞—Å polars ‚Üí –ø—Ä–∏–≤–æ–¥–∏–º –∫ pandas

            index = [s.strip() for s in spec.get("index", "").split(",") if s.strip()]
            columns = [s.strip() for s in spec.get("columns", "").split(",") if s.strip()]
            values = [s.strip() for s in spec.get("values", "").split(",") if s.strip()]

            agg = spec.get("aggfunc", "sum").lower()
            aggfunc = {"sum": "sum", "mean": "mean", "avg": "mean", "count": "count", "max": "max", "min": "min"}.get(agg, "sum")

            fill_raw = spec.get("fill_value", "0")
            try:
                fill_value = int(fill_raw)
            except Exception:
                fill_value = 0

            piv = pd.pivot_table(
                pdf,
                index=index or None,
                columns=columns or None,
                values=values or None,
                aggfunc=aggfunc,
                fill_value=fill_value,
            )
            piv = piv.reset_index()
            # ... –ø–æ—Å–ª–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è piv (pandas) –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ polars:
            st.session_state["last_pivot"] = pl.from_pandas(piv)
            st.session_state["last_df"] = st.session_state["last_pivot"]

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å—Ç–æ—Ä–∏–∏
            _push_result("pivot", df_pl=st.session_state["last_pivot"])

            # –†–∏—Å—É–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ —Å–≤–æ–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            _render_result(st.session_state["results"][-1])
        except Exception as e:
            st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É: {e}")

