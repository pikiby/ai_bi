import re
import os
import io
import streamlit as st
import pandas as pd
import plotly.express as px
from openai import OpenAI
from clickhouse_client import ClickHouse_client
import retriever
import sys
import subprocess
import importlib, prompts
import plotly.graph_objects as go
import polars as pl

importlib.reload(prompts)             # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é —Ñ–∞–π–ª–∞ prompts.py
SYSTEM_PROMPT = prompts.CHAT_SYSTEM_PROMPT

def _parse_spec_block(spec: str) -> dict:
    params = {}
    for line in spec.splitlines():
        if ":" in line:
            k, v = line.split(":", 1)
            params[k.strip().lower()] = v.strip()
    return params

# –ü—É—Ç–∏/–∏–º–µ–Ω–∞ –¥–ª—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π (ChromaDB)
CHROMA_PATH = os.getenv("KB_CHROMA_PATH", "data/chroma")
COLLECTION_NAME = os.getenv("KB_COLLECTION_NAME", "kb_docs")

st.set_page_config(page_title="AI SQL Assistant", page_icon="üí¨")

api_key = os.getenv("OPENAI_API_KEY")
if not api_key:
    st.error("OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω")
    st.stop()
client = OpenAI(api_key=api_key)

st.session_state.setdefault("messages", [])
st.session_state.setdefault("last_df", None)
st.session_state.setdefault("last_pivot", None)



# --- –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π (RAG) ---
with st.sidebar:
    st.header("–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π (RAG)")
    st.caption(f"–ö–æ–ª–ª–µ–∫—Ü–∏—è: {COLLECTION_NAME!r} ¬∑ –ü—É—Ç—å: {CHROMA_PATH!r}")

    if st.button("–ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å docs/"):
        with st.status("–ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã‚Ä¶", expanded=True) as status:
            env = os.environ.copy()
            env["KB_COLLECTION_NAME"] = COLLECTION_NAME
            env["KB_CHROMA_PATH"] = CHROMA_PATH
            proc = subprocess.run([sys.executable, "ingest.py"],
                                capture_output=True, text=True, env=env)
            st.code(proc.stdout or "(–Ω–µ—Ç stdout)")
            if proc.returncode == 0:
                status.update(label="–ì–æ—Ç–æ–≤–æ", state="complete")
            else:
                st.error(proc.stderr)

# –†–µ–Ω–¥–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
for m in st.session_state.messages:
    with st.chat_message(m["role"]):
        st.markdown(m["content"])


user_input = st.chat_input("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å...")
# –§–∏–∫—Å–∏—Ä—É–µ—Ç —Ö–æ–¥ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∏ –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –µ–≥–æ –≤ UI
if user_input:
    st.session_state.messages.append({"role": "user", "content": user_input})
    with st.chat_message("user"):
        st.markdown(user_input)
    #–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ st.session_state.messages (–≥–ª–æ–±–∞–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞), 
    # –∏ –≤—ã–≤–æ–¥–∏—Ç—Å—è –ø—É–∑—ã—Ä—ë–º ‚Äúuser‚Äù –≤ Streamlit. –≠—Ç–∞ –∏—Å—Ç–æ—Ä–∏—è –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –¥–ª—è LLM

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –≤ LLM
    msgs = [{"role": "system", "content": SYSTEM_PROMPT}] + st.session_state.messages
    #–≤—ã–∑—ã–≤–∞–µ—Ç gpt-4o –∏ –ø–æ–ª—É—á–∞–µ—Ç —á–µ—Ä–Ω–æ–≤–æ–π –æ—Ç–≤–µ—Ç
    resp = client.chat.completions.create(
        model="gpt-4o",
        messages=msgs,
        temperature=0.2,
    )
    reply = resp.choices[0].message.content

    # --- –°–Ω–∞—á–∞–ª–∞ —Ä–µ—à–∞–µ–º: –Ω—É–∂–µ–Ω –ª–∏ RAG ---
    final_reply = None  # –æ—Ç–≤–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–≤–∏–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã–ø–æ–ª–Ω—è–µ–º SQL/GRAPH

    # 1) –ü—Ä–æ–≤–µ—Ä–∫–∞ RAG (–Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π reply)
    m = re.search(r"```rag\s*(.*?)```", reply, re.DOTALL | re.IGNORECASE)
    if m:
        rag_query = m.group(1).strip()
        try:
            hits = retriever.retrieve(
                rag_query, k=5,
                chroma_path=CHROMA_PATH,
                collection_name=COLLECTION_NAME,
            )
        except Exception as e:
            hits = []
            st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {e}")

        # –°–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç (–ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –¥–ª–∏–Ω—É)
        context = "\n\n".join([h.get("text", "") for h in hits if h.get("text")])

        # –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ LLM —É–∂–µ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        msgs = (
            [{"role": "system", "content": SYSTEM_PROMPT}]
            + st.session_state.messages
            + [{"role": "system", "content": f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π:\n{context}\n–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ —Å—Ç—Ä–æ–≥–æ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É."}]
        )
        rag_resp = client.chat.completions.create(model="gpt-4o", messages=msgs)
        final_reply = rag_resp.choices[0].message.content
    else:
        # RAG –Ω–µ –Ω—É–∂–µ–Ω ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç
        final_reply = reply

    # 2) –¢–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –†–û–í–ù–û –æ–¥–∏–Ω –æ—Ç–≤–µ—Ç –∏ –ø–∏—à–µ–º –µ–≥–æ –≤ –∏—Å—Ç–æ—Ä–∏—é
    st.session_state.messages.append({"role": "assistant", "content": final_reply})
    with st.chat_message("assistant"):
        st.markdown(final_reply)

    # 3) –î–∞–ª—å—à–µ –≤—Å—ë –¥–µ–ª–∞–µ–º –ø–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É –æ—Ç–≤–µ—Ç—É: SQL –∏/–∏–ª–∏ GRAPH
    m_sql = re.search(r"```sql\s*(.*?)```", final_reply, re.DOTALL | re.IGNORECASE)
    if m_sql:
        sql = m_sql.group(1).strip()
        try:
            ch = ClickHouse_client()
            df = ch.query_run(sql)
            st.session_state["last_df"] = df
            st.dataframe(df.to_pandas(), use_container_width=True)
            csv = io.BytesIO()
            df.to_pandas().to_csv(csv, index=False)
            st.download_button("–°–∫–∞—á–∞—Ç—å CSV", csv.getvalue(), "result.csv", "text/csv")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ SQL: {e}")

    # if "GRAPH" in final_reply.upper() and st.session_state["last_df"] is not None:
    #     pdf = st.session_state["last_df"].to_pandas()
    #     if not pdf.empty:
    #         col_x, col_y = pdf.columns[:2]
    #         fig = px.line(pdf, x=col_x, y=col_y, markers=True)
    #         st.plotly_chart(fig, use_container_width=True)

    # --- PLOTLY CODE (–≥—Ä–∞—Ñ–∏–∫–∏ –∫–∞–∫ –∫–æ–¥) ---
    m_plotly = re.search(r"```plotly\s*(.*?)```", final_reply, re.DOTALL | re.IGNORECASE)
    if m_plotly:
        if st.session_state["last_df"] is None:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞: —Å–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ SQL, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å df.")
        else:
            code = m_plotly.group(1).strip()

            # –ë–∞–∑–æ–≤–∞—è –ø–µ—Å–æ—á–Ω–∏—Ü–∞: –∑–∞–ø—Ä–µ—â–∞–µ–º –æ–ø–∞—Å–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
            banned = re.compile(
                r"\b(import|open|exec|eval|__|subprocess|socket|os\\.|sys\\.|Path\\(|write|remove|unlink|requests|httpx)\b",
                re.IGNORECASE,
            )
            if banned.search(code):
                st.error("–ö–æ–¥ –≥—Ä–∞—Ñ–∏–∫–∞ –æ—Ç–∫–ª–æ–Ω—ë–Ω (–∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏).")
            else:
                try:
                    df = st.session_state["last_df"].to_pandas()  # df –¥–æ—Å—Ç—É–ø–µ–Ω –∫–æ–¥—É
                    safe_globals = {"pd": pd, "px": px, "go": go, "df": df}
                    safe_locals = {}
                    exec(code, safe_globals, safe_locals)
                    fig = safe_locals.get("fig") or safe_globals.get("fig")
                    if fig is None:
                        st.error("–ö–æ–¥ –Ω–µ —Å–æ–∑–¥–∞–ª –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é fig.")
                    else:
                        st.plotly_chart(fig, use_container_width=True)
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
    
    # --- PIVOT (—Å–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞) ---
    m_pivot = re.search(r"```pivot\s*(.*?)```", final_reply, re.DOTALL | re.IGNORECASE)
    if m_pivot and st.session_state["last_df"] is not None:
        try:
            spec = _parse_spec_block(m_pivot.group(1))
            pdf = st.session_state["last_df"].to_pandas()  # last_df —É –Ω–∞—Å polars ‚Üí –ø—Ä–∏–≤–æ–¥–∏–º –∫ pandas

            index = [s.strip() for s in spec.get("index", "").split(",") if s.strip()]
            columns = [s.strip() for s in spec.get("columns", "").split(",") if s.strip()]
            values = [s.strip() for s in spec.get("values", "").split(",") if s.strip()]

            agg = spec.get("aggfunc", "sum").lower()
            aggfunc = {"sum": "sum", "mean": "mean", "avg": "mean", "count": "count", "max": "max", "min": "min"}.get(agg, "sum")

            fill_raw = spec.get("fill_value", "0")
            try:
                fill_value = int(fill_raw)
            except Exception:
                fill_value = 0

            piv = pd.pivot_table(
                pdf,
                index=index or None,
                columns=columns or None,
                values=values or None,
                aggfunc=aggfunc,
                fill_value=fill_value,
            )
            piv = piv.reset_index()
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ polars (—á—Ç–æ–±—ã –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –Ω–µ –ª–æ–º–∞—Ç—å)
            st.session_state["last_pivot"] = pl.from_pandas(piv)
            st.session_state["last_df"] = st.session_state["last_pivot"]

            st.markdown("**–°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞:**")
            st.dataframe(piv, use_container_width=True)
            buf = io.BytesIO()
            piv.to_csv(buf, index=False)
            st.download_button("–°–∫–∞—á–∞—Ç—å CSV (pivot)", buf.getvalue(), "pivot.csv", "text/csv")
        except Exception as e:
            st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É: {e}")

