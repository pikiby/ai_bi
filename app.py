# app.py
# =========================
# –ï–î–ò–ù–´–ô —Ä–µ–∂–∏–º: –∞–≤—Ç–æ-—Ä–æ—É—Ç–∏–Ω–≥ –º–µ–∂–¥—É RAG (–¥–æ–∫—É–º–µ–Ω—Ç—ã) –∏ SQL (ClickHouse)
# =========================

import os
import sys
import re
import subprocess
import streamlit as st
import pandas as pd  # –¥–ª—è –ø—Ä–µ–≤—å—é/—Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ SQL
from openai import OpenAI
from retriever import retrieve
from sql_assistant import run_sql_assistant  # –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ SQL + –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ

st.set_page_config(page_title="Chat + RAG + SQL (Auto)", page_icon="üí¨", layout="centered")

# ---------- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Chroma ----------
CHROMA_PATH = os.getenv("KB_CHROMA_PATH", "data/chroma")
COLLECTION_NAME = os.getenv("KB_COLLECTION_NAME", "kb_docs")

def _validate_collection_name(name: str) -> str:
    n = (name or "").strip().lower()
    if not re.fullmatch(r"[a-z0-9_]{3,63}", n):
        raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {name!r}. –†–∞–∑—Ä–µ—à–µ–Ω—ã 3‚Äì63 —Å–∏–º–≤–æ–ª–∞: [a-z0-9_].")
    return n

COLLECTION_NAME = _validate_collection_name(COLLECTION_NAME)
os.makedirs(CHROMA_PATH, exist_ok=True)
os.makedirs("docs", exist_ok=True)

# ---------- OpenAI –∫–ª—é—á ----------
api_key = os.getenv("OPENAI_API_KEY")
if not api_key:
    st.error("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω–∞.")
    st.stop()
client = OpenAI(api_key=api_key)

# ---------- –°–ª—É–∂–µ–±–Ω—ã–µ —Ö–µ–ª–ø–µ—Ä—ã ----------
def build_history_for_llm(max_turns: int = 6):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ max_turns —Ö–æ–¥–æ–≤ (user/assistant) –≤ —Ñ–æ—Ä–º–∞—Ç–µ OpenAI messages.
    –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤–Ω—É—Ç—Ä—å –±–æ–ª—å—à–∏–µ —Ç–∞–±–ª–∏—Ü—ã ‚Äî –≤ –∏—Å—Ç–æ—Ä–∏—é –º—ã —É–∂–µ –∫–ª–∞–¥—ë–º —Å–∂–∞—Ç—ã–µ —Ç–µ–∫—Å—Ç—ã.
    """
    msgs = []
    for m in st.session_state.messages[-max_turns:]:
        if m["role"] in ("user", "assistant"):
            msgs.append({"role": m["role"], "content": m["content"]})
    return msgs

# –ü—Ä–æ—Å—Ç—ã–µ —ç–≤—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏—è ‚ÄúSQL vs RAG‚Äù
# --- –†–û–£–¢–ï–†: –∞–∫–∫—É—Ä–∞—Ç–Ω–µ–µ —Å–æ —Å–ª–æ–≤–∞–º–∏ –∏ –ø–æ—Ä–æ–≥–æ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ ---
SQL_HINTS = [
    r"\bselect\b", r"\bjoin\b", r"\bwhere\b", r"\border by\b", r"\bgroup by\b",
    r"\bcount\b", r"\bsum\b", r"\bavg\b", r"\bmin\b", r"\bmax\b",
    r"\b–∞–≥—Ä–µ–≥", r"\b—Å—É–º–º", r"\b–ø–æ—Å—á–∏—Ç", r"\b—Å–∫–æ–ª—å–∫–æ\b", r"\b—Ç—Ä–µ–Ω–¥\b",
]
RAG_HINTS = [
    r"\b—á—Ç–æ —Ç–∞–∫–æ–µ\b", r"\b–æ–±—ä—è—Å–Ω", r"\b–æ–ø–∏—Å–∞–Ω", r"\b–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü", r"\b—Å—Ö–µ–º",
    r"\bddl\b", r"\bschema\b", r"\b—Ç–∏–ø –ø–æ–ª(—è|—è)\b", r"\b–æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü",
]

import re
def _score(patterns, text):
    return sum(1 for p in patterns if re.search(p, text))

def heuristic_route(question: str):
    q = (question or "").lower()
    score_sql = _score(SQL_HINTS, q)
    score_rag = _score(RAG_HINTS, q)

    # –¢—Ä–µ–±—É–µ–º ¬´–∑–∞–ø–∞—Å¬ª —Ö–æ—Ç—è –±—ã –≤ 2 –±–∞–ª–ª–∞, –∏–Ω–∞—á–µ —Å—á–∏—Ç–∞–µ–º –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω—ã–º
    if score_sql - score_rag >= 2:
        return "sql", f"heuristic:{score_sql}"
    if score_rag - score_sql >= 1:
        return "rag", f"heuristic:{score_rag}"
    return "unknown", f"heuristic:{score_sql}-{score_rag}"

def llm_route(question: str, model: str = "gpt-4o-mini"):
    """
    –§–æ–ª–±—ç–∫-–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ LLM ‚Äî –ø—Ä–æ—Å–∏–º –≤–µ—Ä–Ω—É—Ç—å —Å—Ç—Ä–æ–≥–æ 'SQL' –∏–ª–∏ 'RAG'.
    """
    sys_txt = (
        "–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:\n"
        "- SQL: –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ—Å—á–∏—Ç–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏/—Å–¥–µ–ª–∞—Ç—å –≤—ã–±–æ—Ä–∫—É/–∞–≥—Ä–µ–≥–∞—Ü–∏—é –∏–∑ ClickHouse.\n"
        "- RAG: –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –ø—Ä–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é/–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª–µ–π/–æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ö–µ–º—ã –∏–∑ docs/.\n"
        "–û—Ç–≤–µ—Ç—å —Å—Ç—Ä–æ–≥–æ –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: SQL –∏–ª–∏ RAG."
    )
    resp = client.chat.completions.create(
        model=model,
        messages=[{"role": "system", "content": sys_txt},
                  {"role": "user", "content": question}],
        temperature=0.0,
    )
    label = (resp.choices[0].message.content or "").strip().upper()
    if label == "SQL":
        return "sql", "llm"
    if label == "RAG":
        return "rag", "llm"
    return "rag", "llm:default"  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–¥—ë–º –≤ RAG

# —Ä–µ—à–∞–µ—Ç, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ heuristic_route –∏–ª–∏ llm_route, –µ—Å–ª–∏ heuristic_route –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
def route_question(question: str, model: str = "gpt-4o-mini", use_llm_fallback: bool = True):
    mode, reason = heuristic_route(question)
    if mode != "unknown":
        return mode, reason
    if use_llm_fallback:
        return llm_route(question, model=model)
    return "rag", "default"

def is_repeat_sql_command(text: str) -> bool:
    t = (text or "").lower()
    return any(kw in t for kw in [
        "–ø–æ–≤—Ç–æ—Ä–∏", "—Ç–æ—Ç –∂–µ", "–∫–∞–∫ —Ä–∞–Ω—å—à–µ", "–∫–∞–∫ –≤ –ø—Ä–æ—à–ª—ã–π —Ä–∞–∑", "—Å —Ç–µ–º–∏ –∂–µ –¥–∞–Ω–Ω—ã–º–∏"
    ])

# ---------- Session State ----------
st.session_state.setdefault("messages", [])
st.session_state.setdefault("last_sql", None)
st.session_state.setdefault("last_sql_df", None)

# ---------- –°–∞–π–¥–±–∞—Ä ----------
with st.sidebar:
    st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    model = st.selectbox(
        "–ú–æ–¥–µ–ª—å",
        options=[
            "gpt-4o-mini",
            "gpt-4o",
            "gpt-4.1-mini",
        ],
        index=0,
    )
    override = st.selectbox("–†–µ–∂–∏–º (–æ—Ç–ª–∞–¥–∫–∞)", ["Auto", "RAG", "SQL"], index=0)
    temperature = st.slider("Temperature", 0.0, 1.0, 0.2, 0.05)
    system_prompt = st.text_area(
        "System prompt",
        value="–¢—ã ‚Äî –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç. –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ‚Äî —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º.",
        height=120,
    )

    st.divider()
    st.subheader("–ò–Ω–≥–µ—Å—Ç –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π")
    st.caption(f"–ö–æ–ª–ª–µ–∫—Ü–∏—è: {COLLECTION_NAME!r} ¬∑ –ü—É—Ç—å –∫ –∏–Ω–¥–µ–∫—Å—É: {CHROMA_PATH!r}")
    if st.button("–ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å docs/"):
        with st.status("–ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã‚Ä¶", expanded=True) as status:
            env = os.environ.copy()
            env["KB_COLLECTION_NAME"] = COLLECTION_NAME
            env["KB_CHROMA_PATH"] = CHROMA_PATH
            proc = subprocess.run(
                [sys.executable, "ingest.py"],
                capture_output=True,
                text=True,
                env=env,
            )
            st.code(proc.stdout or "(–Ω–µ—Ç stdout)")
            if proc.returncode == 0:
                status.update(label="–ì–æ—Ç–æ–≤–æ", state="complete")
            else:
                st.error(proc.stderr)
        
    with st.sidebar.expander("–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ RAG"):
        import os, glob
        st.write("Working dir:", os.getcwd())
        st.write("CHROMA_PATH:", CHROMA_PATH)
        st.write("COLLECTION_NAME:", COLLECTION_NAME)
        st.write("docs/ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç?", os.path.isdir("docs"))
        st.write("–§–∞–π–ª–æ–≤ .md:", len(glob.glob("docs/**/*.md", recursive=True)))
        st.write("–§–∞–π–ª–æ–≤ .pdf:", len(glob.glob("docs/**/*.pdf", recursive=True)))

        # –ü–æ–¥–∫–ª—é—á–∏–º—Å—è –∫ Chroma –∏ –ø–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ —Ç–∞–º –ª–µ–∂–∏—Ç
        try:
            import chromadb
            chroma = chromadb.PersistentClient(path=CHROMA_PATH)
            col = chroma.get_or_create_collection(COLLECTION_NAME)

            cnt = col.count()
            st.write("Docs –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:", cnt)

            if cnt > 0:
                peek = col.peek(limit=min(3, cnt))
                # –ø–æ–∫–∞–∂–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏ –ø–µ—Ä–≤—ã–µ —Å–∏–º–≤–æ–ª—ã —Ç–µ–∫—Å—Ç–∞
                metas = peek.get("metadatas", [])
                docs  = peek.get("documents", [])
                for i in range(len(docs)):
                    src = (metas[i] or {}).get("source")
                    path = (metas[i] or {}).get("path")
                    st.write(f"{i+1}) source={src} path={path}")
                    st.code((docs[i] or "")[:300])
        except Exception as e:
            st.error(f"Chroma peek error: {e}")

    st.divider()
    if st.button("–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", key="clear_history"):
        st.session_state["messages"] = []
        st.session_state["last_sql"] = None
        st.session_state["last_sql_df"] = None
        st.rerun()

# ---------- –ó–∞–≥–æ–ª–æ–≤–æ–∫ ----------
st.title("–ï–¥–∏–Ω—ã–π —á–∞—Ç: –¥–æ–∫—É–º–µ–Ω—Ç—ã (RAG) + –¥–∞–Ω–Ω—ã–µ (SQL) ‚Äî –∞–≤—Ç–æ-—Ä–æ—É—Ç–∏–Ω–≥")
st.caption("–ü–∏—à–∏—Ç–µ –∑–∞–ø—Ä–æ—Å—ã –∫–∞–∫ –µ—Å—Ç—å. –ë–æ—Ç —Å–∞–º —Ä–µ—à–∏—Ç: –∏—Å–∫–∞—Ç—å –≤ docs/ –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å SQL –∫ ClickHouse.")

# ---------- –†–µ–Ω–¥–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ ----------
for msg in st.session_state.messages:
    with st.chat_message(msg["role"]):
        st.markdown(msg["content"])

# ---------- –û—Å–Ω–æ–≤–Ω–æ–π –≤–≤–æ–¥ ----------
user_input = st.chat_input("–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å‚Ä¶")
if not user_input:
    st.stop()

# 1) —Ñ–∏–∫—Å–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ö–æ–¥
st.session_state.messages.append({"role": "user", "content": user_input})
with st.chat_message("user"):
    st.markdown(user_input)

# 2) –∞–≤—Ç–æ-—Ä–æ—É—Ç–∏–Ω–≥
mode, decided_by = route_question(user_input, model=model, use_llm_fallback=True)
if override != "Auto":
    mode = "rag" if override == "RAG" else "sql"
    decided_by = f"override:{override}"
st.caption(f"–†–æ—É—Ç–µ—Ä: {mode} ({decided_by})")

# 3) SQL: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ ‚Äú–ø–æ–≤—Ç–æ—Ä–∏ –∑–∞–ø—Ä–æ—Å‚Äù
if mode == "sql" and is_repeat_sql_command(user_input):
    if st.session_state.last_sql:
        try:
            from clickhouse_client import ClickHouse_client
            sql = st.session_state.last_sql
            df = ClickHouse_client().query_run(sql)

            with st.chat_message("assistant"):
                st.markdown("**–ü–æ–≤—Ç–æ—Ä –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ SQL:**")
                st.code(sql, language="sql")
                st.dataframe(df.to_pandas(), use_container_width=True)

                # CSV –∫–Ω–æ–ø–∫–∞ (–Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –∏—Å—Ç–æ—Ä–∏—é ‚Äî –Ω–∞–º–µ—Ä–µ–Ω–Ω–æ)
                import io
                csv_bytes = io.BytesIO()
                df.to_pandas().to_csv(csv_bytes, index=False)
                st.download_button("–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç (CSV)", csv_bytes.getvalue(),
                                   file_name="result.csv", mime="text/csv")

            # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            st.session_state.last_sql = sql
            st.session_state.last_sql_df = df

            # –ø–∏—à–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –∫—Ä–∞—Ç–∫–∏–π –±–ª–æ–∫
            st.session_state.messages.append({
                "role": "assistant",
                "content": f"–ü–æ–≤—Ç–æ—Ä–∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π SQL. –°—Ç—Ä–æ–∫: {df.height}, —Å—Ç–æ–ª–±—Ü–æ–≤: {df.width}."
            })
            st.stop()
        except Exception as e:
            with st.chat_message("assistant"):
                st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–≤—Ç–æ—Ä–∏—Ç—å SQL: {e}")
            st.session_state.messages.append({"role": "assistant", "content": f"–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–∞ SQL: {e}"})
            st.stop()

# 4) –û—Å–Ω–æ–≤–Ω–æ–π —Ä–æ—É—Ç–∏–Ω–≥
if mode == "sql":
    # --- SQL –ø—É—Ç—å ---
    try:
        database = "db1"
        allowed_tables = ["total_active_users", "total_active_users_rep_mobile_total"]  # –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å—É–∑–∏—Ç—å

        sql, df = run_sql_assistant(
            question=user_input,
            database=database,
            allowed_tables=allowed_tables,
            model=model,
        )

        # –∂–∏–≤–æ–π –≤—ã–≤–æ–¥
        with st.chat_message("assistant"):
            st.markdown("**–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π SQL:**")
            st.code(sql, language="sql")
            st.markdown("**–†–µ–∑—É–ª—å—Ç–∞—Ç:**")
            st.dataframe(df.to_pandas(), use_container_width=True)

            # –∫–Ω–æ–ø–∫–∞ CSV (–∂–∏–≤–æ–π —Ä–µ–Ω–¥–µ—Ä; –Ω–µ –ø–∏—à–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é)
            import io
            csv_bytes = io.BytesIO()
            df.to_pandas().to_csv(csv_bytes, index=False)
            st.download_button("–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç (CSV)", csv_bytes.getvalue(),
                               file_name="result.csv", mime="text/csv")

        # —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é SQL + –∫–æ–º–ø–∞–∫—Ç–Ω–æ–µ –ø—Ä–µ–≤—å—é (–¥–æ 50 —Å—Ç—Ä–æ–∫)
        try:
            preview_pd: pd.DataFrame = df.head(50).to_pandas()
            try:
                preview_md = preview_pd.to_markdown(index=False)  # —Ç—Ä–µ–±—É–µ—Ç tabulate
            except Exception:
                preview_md = "```\n" + preview_pd.to_csv(index=False) + "\n```"
        except Exception:
            preview_md = "_–Ω–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–≤—å—é_"

        history_block = (
            "**–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π SQL:**\n"
            f"```sql\n{sql}\n```\n\n"
            f"**–ü—Ä–µ–≤—å—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–ø–µ—Ä–≤—ã–µ {min(50, len(df))} —Å—Ç—Ä–æ–∫):**\n\n"
            f"{preview_md}"
        )
        st.session_state.messages.append({"role": "assistant", "content": history_block})

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –±—É–¥—É—â–∏—Ö ‚Äú–ø–æ–≤—Ç–æ—Ä–∏/–∏–∑–º–µ–Ω–∏‚Äù
        st.session_state.last_sql = sql
        st.session_state.last_sql_df = df

    except Exception as e:
        with st.chat_message("assistant"):
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏/–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ SQL: {e}")
        st.session_state.messages.append({"role": "assistant", "content": f"–û—à–∏–±–∫–∞: {e}"})

else:
    # --- RAG –ø—É—Ç—å ---
    # 1) –¥–æ—Å—Ç–∞—ë–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ Chroma
    try:
        ctx_docs = retrieve(
            user_input,
            k=5,
            chroma_path=CHROMA_PATH,
            collection_name=COLLECTION_NAME
        )
        st.caption(f"RAG: –Ω–∞–π–¥–µ–Ω–æ —á–∞–Ω–∫–æ–≤ = {len(ctx_docs)}")
        if not ctx_docs:
            st.info("–ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ ¬´–ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å docs/¬ª –∏ —á—Ç–æ –≤ docs/ –µ—Å—Ç—å .md/.pdf.")
    except Exception as e:
        with st.chat_message("assistant"):
            st.error(f"–û—à–∏–±–∫–∞ —Ä–µ—Ç—Ä–∏–≤–∞: {e}")
        st.session_state.messages.append({"role": "assistant", "content": f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç: {e}"})
        ctx_docs = []

    context = "\n\n".join([f"[{i+1}] {d['source']}: {d['text'][:300]}..." for i, d in enumerate(ctx_docs)]) or "‚Äî"


    # 2) —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è LLM: system + –∏—Å—Ç–æ—Ä–∏—è + —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å —Å CONTEXT
    history_msgs = build_history_for_llm(max_turns=6)
    llm_messages = (
        [{"role": "system", "content": system_prompt}]
        + history_msgs
        + [{
            "role": "user",
            "content": (
                f"QUESTION:\n{user_input}\n\n"
                f"CONTEXT:\n{context}\n\n"
                "–ü—Ä–∞–≤–∏–ª–∞: –æ—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –ø–æ CONTEXT. –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî —Ç–∞–∫ –∏ —Å–∫–∞–∂–∏."
            )
        }]
    )

    # 3) –ø–æ—Ç–æ–∫–æ–≤—ã–π –æ—Ç–≤–µ—Ç
    with st.chat_message("assistant"):
        placeholder = st.empty()
        stream_text = ""
        stream = client.chat.completions.create(
            model=model,
            messages=llm_messages,
            temperature=temperature,
            stream=True,
        )
        for chunk in stream:
            delta = chunk.choices[0].delta.content or ""
            stream_text += delta
            placeholder.markdown(stream_text)

    # 4) —Ñ–∏–∫—Å–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
    st.session_state.messages.append({"role": "assistant", "content": stream_text})

    # 5) –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (–∂–∏–≤–æ–π —Ä–µ–Ω–¥–µ—Ä; –Ω–µ –ø–∏—à–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é)
    if ctx_docs:
        with st.expander("–ò—Å—Ç–æ—á–Ω–∏–∫–∏"):
            for i, d in enumerate(ctx_docs, 1):
                st.write(f"[{i}] {d['source']} ‚Äî {d['path']}  (score={d['score']:.4f})")
