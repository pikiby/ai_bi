import os
import io
import streamlit as st
import pandas as pd
import plotly.express as px
from openai import OpenAI
from clickhouse_client import ClickHouse_client
import re
import retriever
import sys
import subprocess

# –ü—É—Ç–∏/–∏–º–µ–Ω–∞ –¥–ª—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π (ChromaDB)
CHROMA_PATH = os.getenv("KB_CHROMA_PATH", "data/chroma")
COLLECTION_NAME = os.getenv("KB_COLLECTION_NAME", "kb_docs")

st.set_page_config(page_title="AI SQL Assistant", page_icon="üí¨")

api_key = os.getenv("OPENAI_API_KEY")
if not api_key:
    st.error("OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω")
    st.stop()
client = OpenAI(api_key=api_key)

st.session_state.setdefault("messages", [])
st.session_state.setdefault("last_df", None)

SYSTEM_PROMPT = """
–¢—ã ‚Äî SQL-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è ClickHouse.
–¢—ã –≤—Å–µ–≥–¥–∞ –≤–∏–¥–∏—à—å –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞.
–ü—Ä–∞–≤–∏–ª–∞:
- –û—Ç–≤–µ—á–∞–π –ª–∏–±–æ SQL –≤ –±–ª–æ–∫–µ ```sql ... ```, –ª–∏–±–æ —Ç–µ–∫—Å—Ç–æ–º.
- SQL —Ç–æ–ª—å–∫–æ SELECT/CTE. –ù–∏–∫–∞–∫–∏—Ö DDL/DML.
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Å—Å—ã–ª–∞—Ç—å—Å—è –Ω–∞ ¬´–ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å¬ª, ¬´—Ç–∞–±–ª–∏—Ü—É-1¬ª, ¬´—Å–¥–µ–ª–∞–π –≥—Ä–∞—Ñ–∏–∫¬ª.
- –ü–æ–¥ —Ç–∞–±–ª–∏—Ü–µ–π-1,2,... –ø–æ–Ω–∏–º–∞—é—Ç—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö SQL –≤ –∏—Å—Ç–æ—Ä–∏–∏.
- –ï—Å–ª–∏ –ø—Ä–æ—Å—è—Ç –≥—Ä–∞—Ñ–∏–∫ ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏ ¬´GRAPH¬ª, –∏ —è –ø–æ—Å—Ç—Ä–æ—é –µ–≥–æ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç–∞–±–ª–∏—Ü–µ.
"""


# –†–µ–Ω–¥–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
for m in st.session_state.messages:
    with st.chat_message(m["role"]):
        st.markdown(m["content"])


user_input = st.chat_input("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å...")
if user_input:
    st.session_state.messages.append({"role": "user", "content": user_input})
    with st.chat_message("user"):
        st.markdown(user_input)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –≤ LLM
    msgs = [{"role": "system", "content": SYSTEM_PROMPT}] + st.session_state.messages
    resp = client.chat.completions.create(
        model="gpt-4o",
        messages=msgs,
        temperature=0.2,
    )
    reply = resp.choices[0].message.content
    st.session_state.messages.append({"role": "assistant", "content": reply})

    with st.chat_message("assistant"):
        st.markdown(reply)

    # --- –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π (RAG) ---
    with st.sidebar:
        st.header("–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π (RAG)")
        st.caption(f"–ö–æ–ª–ª–µ–∫—Ü–∏—è: {COLLECTION_NAME!r} ¬∑ –ü—É—Ç—å: {CHROMA_PATH!r}")

        if st.button("–ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å docs/"):
            with st.status("–ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã‚Ä¶", expanded=True) as status:
                env = os.environ.copy()
                env["KB_COLLECTION_NAME"] = COLLECTION_NAME
                env["KB_CHROMA_PATH"] = CHROMA_PATH
                proc = subprocess.run([sys.executable, "ingest.py"],
                                    capture_output=True, text=True, env=env)
                st.code(proc.stdout or "(–Ω–µ—Ç stdout)")
                if proc.returncode == 0:
                    status.update(label="–ì–æ—Ç–æ–≤–æ", state="complete")
                else:
                    st.error(proc.stderr)

     # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ RAG
    m = re.search(r"```rag\\s*(.*?)```", reply, re.DOTALL | re.IGNORECASE)
    if m:
        rag_query = m.group(1).strip()
        hits = retriever.retrieve(rag_query, k=5)
        context = "\n\n".join([h["text"] for h in hits])
        msgs = (
            [{"role": "system", "content": SYSTEM_PROMPT}]
            + st.session_state.messages
            + [{"role": "system", "content": f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π:\\n{context}"}]
        )
        rag_resp = client.chat.completions.create(
            model="gpt-4o",
            messages=msgs,
        )
        rag_reply = rag_resp.choices[0].message.content
        st.session_state.messages.append({"role": "assistant", "content": rag_reply})
        with st.chat_message("assistant"):
            st.markdown(rag_reply)


    # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç SQL ‚Üí –≤—ã–ø–æ–ª–Ω–∏—Ç—å
    
    m = re.search(r"```sql\s*(.*?)```", reply, re.DOTALL | re.IGNORECASE)
    if m:
        sql = m.group(1).strip()
        try:
            ch = ClickHouse_client()
            df = ch.query_run(sql)
            st.session_state["last_df"] = df
            st.dataframe(df.to_pandas(), use_container_width=True)
            csv = io.BytesIO()
            df.to_pandas().to_csv(csv, index=False)
            st.download_button("–°–∫–∞—á–∞—Ç—å CSV", csv.getvalue(), "result.csv", "text/csv")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ SQL: {e}")

    # –ï—Å–ª–∏ —è–≤–Ω–æ —Å–∫–∞–∑–∞–ª–∏ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ ‚Üí —Å—Ç—Ä–æ–∏–º –ø–æ last_df
    if "GRAPH" in reply.upper() and st.session_state["last_df"] is not None:
        pdf = st.session_state["last_df"].to_pandas()
        if not pdf.empty:
            col_x, col_y = pdf.columns[:2]
            fig = px.line(pdf, x=col_x, y=col_y, markers=True)
            st.plotly_chart(fig, use_container_width=True)
