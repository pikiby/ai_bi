# app.py
# =========================
# –ï–î–ò–ù–´–ô —á–∞—Ç: –∞–≤—Ç–æ-—Ä–æ—É—Ç–∏–Ω–≥ –º–µ–∂–¥—É RAG (docs/ —á–µ—Ä–µ–∑ Chroma) –∏ SQL (ClickHouse),
# –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ (Plotly) –∏ "–ª–∏–ø–∫–æ–≥–æ" –≥—Ä–∞—Ñ–∏–∫–∞ –º–µ–∂–¥—É —Ä–µ—Ä–µ–Ω–¥–µ—Ä–∞–º–∏.
# =========================

import os
import sys
import re
import io
import glob
import subprocess
import streamlit as st
import pandas as pd
import polars as pl
import numpy as np
import plotly.express as px
from openai import OpenAI
from clickhouse_client import ClickHouse_client
from retriever import retrieve
from sql_assistant import run_sql_assistant  # –≥–µ–Ω–µ—Ä–∞—Ü–∏—è/–∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ SELECT

st.set_page_config(page_title="Chat + RAG + SQL (Auto)", page_icon="üí¨", layout="centered")

# ---------- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Chroma ----------
CHROMA_PATH = os.getenv("KB_CHROMA_PATH", "data/chroma")
COLLECTION_NAME = os.getenv("KB_COLLECTION_NAME", "kb_docs")

def _validate_collection_name(name: str) -> str:
    n = (name or "").strip().lower()
    if not re.fullmatch(r"[a-z0-9_]{3,63}", n):
        raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {name!r}. –†–∞–∑—Ä–µ—à–µ–Ω—ã 3‚Äì63 —Å–∏–º–≤–æ–ª–∞: [a-z0-9_].")
    return n

COLLECTION_NAME = _validate_collection_name(COLLECTION_NAME)
os.makedirs(CHROMA_PATH, exist_ok=True)
os.makedirs("docs", exist_ok=True)

# ---------- OpenAI –∫–ª—é—á ----------
api_key = os.getenv("OPENAI_API_KEY")
if not api_key:
    st.error("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω–∞.")
    st.stop()
client = OpenAI(api_key=api_key)

# ---------- Session State ----------
st.session_state.setdefault("messages", [])
st.session_state.setdefault("last_sql", None)
st.session_state.setdefault("viz_active", False)  # –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–∏ —Ä–µ—Ä–µ–Ω–¥–µ—Ä–∞—Ö
st.session_state.setdefault("viz_text", "")       # –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Å—Ç—Ä–æ–∏–ª—Å—è –≥—Ä–∞—Ñ–∏–∫

# ---------- –°–ª—É–∂–µ–±–Ω—ã–µ —Ö–µ–ª–ø–µ—Ä—ã ----------
def build_history_for_llm(max_turns: int = 6):
    """–í–µ—Ä–Ω—É—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ max_turns —Ö–æ–¥–æ–≤ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è LLM (–±–µ–∑ —Ç–∞–±–ª–∏—Ü/–≥—Ä–∞—Ñ–∏–∫–æ–≤)."""
    msgs = []
    for m in st.session_state.messages[-max_turns:]:
        if m["role"] in ("user", "assistant"):
            msgs.append({"role": m["role"], "content": m["content"]})
    return msgs

def is_followup_sql_edit(text: str) -> bool:
    t = (text or "").lower()
    # –∫–æ—Ä–æ—Ç–∫–∏–µ –±—ã—Ç–æ–≤—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏
    triggers = [
        "–¥–æ–±–∞–≤—å —Å—Ç–æ–ª–±", "–¥–æ–±–∞–≤—å –∫–æ–ª–æ–Ω", "–¥–æ–±–∞–≤—å –ø–æ–ª–µ",
        "–ø–µ—Ä–µ–∏–º–µ–Ω", "–∑–∞–º–µ–Ω–∏", "—É–¥–∞–ª–∏ —Å—Ç–æ–ª–±", "—É–¥–∞–ª–∏ –∫–æ–ª–æ–Ω", "—É–¥–∞–ª–∏ –ø–æ–ª–µ",
        "–¥–æ–±–∞–≤—å —Ñ–∏–ª—å—Ç—Ä", "—É–±–µ—Ä–∏ —Ñ–∏–ª—å—Ç—Ä", "–¥–æ–±–∞–≤—å —É—Å–ª–æ–≤", "—É–±–µ—Ä–∏ —É—Å–ª–æ–≤",
        "—Å–æ—Ä—Ç–∏—Ä", "order by", "–≥—Ä—É–ø–ø–∏—Ä", "group by", "–∞–≥—Ä–µ–≥",
        "—Å–¥–µ–ª–∞–π –¥–æ–ª—é", "–ø—Ä–æ—Ü–µ–Ω—Ç", "–∫—É–º—É–ª—è—Ç–∏–≤", "–∫—É–º—É–ª—è—Ç–∏–≤–Ω—ã–π", "running total",
        "—Ç–æ—Ç –∂–µ –∑–∞–ø—Ä–æ—Å", "–∫–∞–∫ —Ä–∞–Ω—å—à–µ", "–∫–∞–∫ –≤ –ø—Ä–æ—à–ª—ã–π —Ä–∞–∑", "—Ç–æ—Ç –∂–µ, –Ω–æ", "–¥–æ–±–∞–≤—å –≤ –∑–∞–ø—Ä–æ—Å",
    ]
    return any(p in t for p in triggers)

# --- –≠–≤—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è SQL / RAG ---
SQL_HINTS = [
    r"\bselect\b", r"\bjoin\b", r"\bwhere\b", r"\border by\b", r"\bgroup by\b",
    r"\bcount\b", r"\bsum\b", r"\bavg\b", r"\bmin\b", r"\bmax\b",
    r"\b–∞–≥—Ä–µ–≥", r"\b—Å—É–º–º", r"\b–ø–æ—Å—á–∏—Ç", r"\b—Å–∫–æ–ª—å–∫–æ\b", r"\b—Ç—Ä–µ–Ω–¥\b",
]
RAG_HINTS = [
    r"\b—á—Ç–æ —Ç–∞–∫–æ–µ\b", r"\b–æ–±—ä—è—Å–Ω", r"\b–æ–ø–∏—Å–∞–Ω", r"\b–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü", r"\b—Å—Ö–µ–º",
    r"\bddl\b", r"\bschema\b", r"\b—Ç–∏–ø –ø–æ–ª(—è|–µ–π)\b", r"\b–æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü",
]

def _score(patterns, text):
    return sum(1 for p in patterns if re.search(p, text))

def heuristic_route(question: str):
    q = (question or "").lower()
    score_sql = _score(SQL_HINTS, q)
    score_rag = _score(RAG_HINTS, q)
    if score_sql - score_rag >= 2:
        return "sql", f"heuristic:{score_sql}"
    if score_rag - score_sql >= 1:
        return "rag", f"heuristic:{score_rag}"
    return "unknown", f"heuristic:{score_sql}-{score_rag}"

def llm_route(question: str, model: str = "gpt-4o-mini"):
    """–§–æ–ª–±—ç–∫-–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ LLM: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ('sql'|'rag', 'llm')."""
    sys_txt = (
        "–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å:\n"
        "- SQL ‚Äî –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ—Å—á–∏—Ç–∞—Ç—å/–≤—ã–±—Ä–∞—Ç—å/–∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ ClickHouse.\n"
        "- RAG ‚Äî –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –ø—Ä–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é/—Å—Ö–µ–º—É/–æ–ø–∏—Å–∞–Ω–∏—è –∏–∑ docs/.\n"
        "–û—Ç–≤–µ—Ç—å —Å—Ç—Ä–æ–≥–æ –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: SQL –∏–ª–∏ RAG."
    )
    resp = client.chat.completions.create(
        model=model,
        messages=[{"role": "system", "content": sys_txt},
                  {"role": "user", "content": question}],
        temperature=0.0,
    )
    label = (resp.choices[0].message.content or "").strip().upper()
    if label == "SQL":
        return "sql", "llm"
    if label == "RAG":
        return "rag", "llm"
    return "rag", "llm:default"

def route_question(question: str, model: str = "gpt-4o-mini", use_llm_fallback: bool = True):
    mode, reason = heuristic_route(question)
    if mode != "unknown":
        return mode, reason
    if use_llm_fallback:
        return llm_route(question, model=model)
    return "rag", "default"

# --- –ù–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ ---
_CHART_HINTS = [
    "–≥—Ä–∞—Ñ–∏–∫", "–¥–∏–∞–≥—Ä–∞–º–º", "–ø–æ—Å—Ç—Ä–æ–π", "–≤–∏–∑—É–∞–ª–∏–∑", "plot", "chart",
    "–ª–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫", "—Å—Ç–æ–ª–±—á–∞—Ç", "bar", "line", "scatter", "hist",
    "–¥–æ–ª—é", "—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ", "–¥–∏–Ω–∞–º–∏–∫", "—Ç—Ä–µ–Ω–¥"
]
def is_chart_intent(text: str) -> bool:
    t = (text or "").lower()
    return any(k in t for k in _CHART_HINTS)

# --- –•–µ–ª–ø–µ—Ä—ã –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ ---
def _to_pandas(df):
    if isinstance(df, pl.DataFrame):
        return df.to_pandas()
    if isinstance(df, pd.DataFrame):
        return df
    raise TypeError("–û–∂–∏–¥–∞–µ—Ç—Å—è Polars –∏–ª–∏ Pandas DataFrame")

def _guess_roles(pdf: pd.DataFrame):
    """–≠–≤—Ä–∏—Å—Ç–∏–∫–∞ –≤—ã–±–æ—Ä–∞ X/Y/–∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    cols = list(pdf.columns)
    if not cols:
        return {"x": None, "y_candidates": [], "cat": None}
    # —è–≤–Ω—ã–µ –¥–∞—Ç—ã
    dt_cols = [c for c in cols if pd.api.types.is_datetime64_any_dtype(pdf[c])]
    if not dt_cols:
        # –ø–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–∏–≤–µ—Å—Ç–∏ —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –∫ –¥–∞—Ç–µ
        for c in cols:
            if pdf[c].dtype == object:
                try:
                    pd.to_datetime(pdf[c], errors="raise")
                    dt_cols.append(c)
                    break
                except Exception:
                    pass
    num_cols = [c for c in cols if pd.api.types.is_numeric_dtype(pdf[c])]
    str_cols = [c for c in cols if pdf[c].dtype == object]
    x = dt_cols[0] if dt_cols else (str_cols[0] if str_cols else None)
    y_candidates = [c for c in num_cols if c != x]
    cat = str_cols[0] if (dt_cols and str_cols) else None
    return {"x": x, "y_candidates": y_candidates, "cat": cat}

def render_auto_chart(df, user_text: str, *, key_prefix: str = "viz"):
    """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –ø–æ df –∏ —Ç–µ–∫—Å—Ç—É –∑–∞–ø—Ä–æ—Å–∞. –° —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏ –¥–ª—è –≤–∏–¥–∂–µ—Ç–æ–≤."""
    pdf = _to_pandas(df).copy()
    # –ø—Ä–∏–≤–µ–¥—ë–º –æ—á–µ–≤–∏–¥–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–∞—Ç –∫ datetime
    for c in pdf.columns:
        if any(k in c.lower() for k in ["date", "time", "dt", "timestamp", "–¥–∞—Ç–∞", "–≤—Ä–µ–º—è"]):
            try:
                pdf[c] = pd.to_datetime(pdf[c], errors="ignore")
            except Exception:
                pass

    roles = _guess_roles(pdf)
    x, y_cands, cat = roles["x"], roles["y_candidates"], roles["cat"]
    if x is None and not y_cands:
        st.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ (–Ω–µ—Ç –æ—Å–∏ X –∏–ª–∏ —á–∏—Å–ª–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤).")
        return

    # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏ –¥–ª—è –≤–∏–¥–∂–µ—Ç–æ–≤ (–∏–∑ –∫–æ–ª–æ–Ω–æ–∫)
    key_base = f"{key_prefix}_{hash(tuple(pdf.columns)) % 10**8}"

    chart_type = st.radio(
        "–¢–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞",
        options=["auto", "line", "bar", "scatter", "hist"],
        index=0,
        horizontal=True,
        help="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤—Ä—É—á–Ω—É—é, –µ—Å–ª–∏ –∞–≤—Ç–æ-–≤—ã–±–æ—Ä –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç.",
        key=f"{key_base}_type"
    )

    # –ê–≤—Ç–æ–≤—ã–±–æ—Ä
    if chart_type == "auto":
        if x is not None and np.issubdtype(pdf[x].dtype, np.datetime64):
            chart_type = "line" if y_cands else "hist"
        elif x is not None and pdf[x].dtype == object and y_cands:
            chart_type = "bar"
        elif len(y_cands) >= 2:
            chart_type = "scatter"
        elif y_cands:
            chart_type = "hist"
        else:
            chart_type = "bar"

    y = y_cands[0] if y_cands else None

    st.markdown("### –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è")
    st.caption(f"–¢–∏–ø: {chart_type}; X={x or '‚Äî'}; Y={y or '‚Äî'}; Category={cat or '‚Äî'}")

    if chart_type == "line":
        if x is None or not y:
            st.info("–î–ª—è line-–≥—Ä–∞—Ñ–∏–∫–∞ –Ω—É–∂–Ω–∞ –æ—Å—å X –∏ —á–∏—Å–ª–æ–≤–∞—è Y.")
            return
        fig = px.line(pdf, x=x, y=y, color=cat, markers=True, title=None)
        st.plotly_chart(fig, use_container_width=True, key=f"{key_base}_plot")

    elif chart_type == "bar":
        if x and y:
            fig = px.bar(pdf, x=x, y=y, color=cat, title=None)
        elif y:
            fig = px.bar(pdf, x=pdf.index, y=y, title=None)
        else:
            st.info("–ù–µ—á–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –Ω–∞ bar-–≥—Ä–∞—Ñ–∏–∫–µ.")
            return
        st.plotly_chart(fig, use_container_width=True, key=f"{key_base}_plot")

    elif chart_type == "scatter":
        if len(y_cands) >= 2:
            y2 = y_cands[1]
            fig = px.scatter(pdf, x=y, y=y2, color=cat, hover_data=pdf.columns, title=None)
            st.plotly_chart(fig, use_container_width=True, key=f"{key_base}_plot")
        else:
            st.info("–î–ª—è scatter –Ω—É–∂–Ω—ã –∫–∞–∫ –º–∏–Ω–∏–º—É–º –¥–≤–µ —á–∏—Å–ª–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏.")
            return

    elif chart_type == "hist":
        target = y or x
        if target is None:
            st.info("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –ø–æ–ª–µ –¥–ª—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã.")
            return
        fig = px.histogram(pdf, x=target, color=cat, nbins=30, title=None)
        st.plotly_chart(fig, use_container_width=True, key=f"{key_base}_plot")

    else:
        st.info("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞.")

# ---------- –°–∞–π–¥–±–∞—Ä ----------
with st.sidebar:
    st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    model = st.selectbox(
        "–ú–æ–¥–µ–ª—å",
        options=["gpt-4o-mini", "gpt-4o", "gpt-4.1-mini"],
        index=0,
    )
    override = st.selectbox("–†–µ–∂–∏–º (–æ—Ç–ª–∞–¥–∫–∞)", ["Auto", "RAG", "SQL"], index=0)
    temperature = st.slider("Temperature", 0.0, 1.0, 0.2, 0.05)
    system_prompt = st.text_area(
        "System prompt",
        value="–¢—ã ‚Äî –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç. –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ‚Äî —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º.",
        height=120,
    )

    st.divider()
    st.subheader("–ò–Ω–≥–µ—Å—Ç –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π")
    st.caption(f"–ö–æ–ª–ª–µ–∫—Ü–∏—è: {COLLECTION_NAME!r} ¬∑ –ü—É—Ç—å –∫ –∏–Ω–¥–µ–∫—Å—É: {CHROMA_PATH!r}")
    if st.button("–ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å docs/"):
        with st.status("–ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã‚Ä¶", expanded=True) as status:
            env = os.environ.copy()
            env["KB_COLLECTION_NAME"] = COLLECTION_NAME
            env["KB_CHROMA_PATH"] = CHROMA_PATH
            proc = subprocess.run(
                [sys.executable, "ingest.py"],
                capture_output=True,
                text=True,
                env=env,
            )
            st.code(proc.stdout or "(–Ω–µ—Ç stdout)")
            if proc.returncode == 0:
                status.update(label="–ì–æ—Ç–æ–≤–æ", state="complete")
            else:
                st.error(proc.stderr)

    with st.sidebar.expander("–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ RAG", expanded=False):
        st.write("Working dir:", os.getcwd())
        st.write("CHROMA_PATH:", CHROMA_PATH)
        st.write("COLLECTION_NAME:", COLLECTION_NAME)
        st.write("docs/ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç?", os.path.isdir("docs"))
        st.write("–§–∞–π–ª–æ–≤ .md:", len(glob.glob("docs/**/*.md", recursive=True)))
        st.write("–§–∞–π–ª–æ–≤ .pdf:", len(glob.glob("docs/**/*.pdf", recursive=True)))
        try:
            import chromadb
            chroma = chromadb.PersistentClient(path=CHROMA_PATH)
            col = chroma.get_or_create_collection(COLLECTION_NAME)
            cnt = col.count()
            st.write("Docs –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:", cnt)
            if cnt > 0:
                peek = col.peek(limit=min(3, cnt))
                metas = peek.get("metadatas", [])
                docs = peek.get("documents", [])
                for i in range(len(docs)):
                    src = (metas[i] or {}).get("source")
                    path = (metas[i] or {}).get("path")
                    st.write(f"{i+1}) source={src} path={path}")
                    st.code((docs[i] or "")[:300])
        except Exception as e:
            st.error(f"Chroma peek error: {e}")

    st.divider()
    if st.button("–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", key="clear_history"):
        st.session_state["messages"] = []
        st.session_state["last_sql"] = None
        st.session_state["viz_active"] = False
        st.session_state["viz_text"] = ""
        st.rerun()

# ---------- –ó–∞–≥–æ–ª–æ–≤–æ–∫ ----------
st.title("–ï–¥–∏–Ω—ã–π —á–∞—Ç: –¥–æ–∫—É–º–µ–Ω—Ç—ã (RAG) + –¥–∞–Ω–Ω—ã–µ (SQL) ‚Äî –∞–≤—Ç–æ-—Ä–æ—É—Ç–∏–Ω–≥")
st.caption("–ü–∏—à–∏—Ç–µ –∑–∞–ø—Ä–æ—Å—ã –∫–∞–∫ –µ—Å—Ç—å. –ë–æ—Ç —Å–∞–º —Ä–µ—à–∏—Ç: –∏—Å–∫–∞—Ç—å –≤ docs/ –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å SQL –∫ ClickHouse. –ï—Å–ª–∏ –ø—Ä–æ—Å–∏—Ç–µ –≥—Ä–∞—Ñ–∏–∫ ‚Äî —Ç–∞–±–ª–∏—Ü–∞ —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è.")

# ---------- –†–µ–Ω–¥–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ ----------
for msg in st.session_state.messages:
    with st.chat_message(msg["role"]):
        st.markdown(msg["content"])

# ---------- –û—Å–Ω–æ–≤–Ω–æ–π –≤–≤–æ–¥ ----------
user_input = st.chat_input("–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å‚Ä¶")
if not user_input:
# Sticky –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è (–∫–æ–≥–¥–∞ –Ω–µ—Ç –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è)
    if st.session_state.get("viz_active"):
        last_sql = get_last_sql()
    if last_sql:
        df_sticky = _safe_fetch_df_from_sql(last_sql, limit=500)
        if df_sticky is not None:
            try:
                render_auto_chart(df_sticky, st.session_state.get("viz_text", ""), key_prefix="main_viz")
            except Exception as e:
                st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫: {e}")
    st.stop()

# –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —Å–±—Ä–æ—Å "–ª–∏–ø–∫–æ—Å—Ç–∏" (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
st.session_state["viz_active"] = False
st.session_state["viz_text"] = ""

# 1) —Ñ–∏–∫—Å–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ö–æ–¥
st.session_state.messages.append({"role": "user", "content": user_input})
with st.chat_message("user"):
    st.markdown(user_input)


chart_requested = is_chart_intent(user_input)

force_sql = False
if is_followup_sql_edit(user_input) and st.session_state.get("last_sql"):
    mode, decided_by = "sql", "followup-edit"
    force_sql = True
else:
    mode, decided_by = route_question(user_input, model=model, use_llm_fallback=True)

if override != "Auto" and not force_sql:
    mode = "rag" if override == "RAG" else "sql"
    decided_by = f"override:{override}"

st.caption(f"–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è: {mode} ({decided_by})")

if is_followup_sql_edit(user_input) and not st.session_state.get("last_sql"):
    with st.chat_message("assistant"):
        st.info("–ù–µ –Ω–∞—à—ë–ª –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–∞–≤–∫–∏. –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å —Ü–µ–ª–∏–∫–æ–º –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –±–∞–∑–æ–≤—ã–π SELECT, –ø–æ—Å–ª–µ —á–µ–≥–æ —è —Å–º–æ–≥—É –µ–≥–æ –∏–∑–º–µ–Ω–∏—Ç—å.")
    st.session_state.messages.append({"role":"assistant","content":"–ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ SQL –¥–ª—è –ø—Ä–∞–≤–∫–∏; –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –±–∞–∑–æ–≤—ã–π SELECT."})
    st.stop()

# 3) –û—Å–Ω–æ–≤–Ω–æ–π —Ä–æ—É—Ç–∏–Ω–≥
if mode == "sql":
    # --- SQL –ø—É—Ç—å ---
    try:
        database = "db1"
        allowed_tables = ["total_active_users", "total_active_users_rep_mobile_total"]

        prev_sql = st.session_state.get("last_sql") if is_followup_sql_edit(user_input) else None

        if prev_sql:
            question_for_sql = (
                "–ò–∑–º–µ–Ω–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π SELECT —Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. "
                "–ù–µ –º–µ–Ω—è–π –ª–æ–≥–∏–∫—É WHERE/JOIN/–∞–≥—Ä–µ–≥–∞—Ç–æ–≤; —Ç–æ–ª—å–∫–æ –≤–Ω–µ—Å–∏ –ø—Ä–∞–≤–∫–∏ –∫ —Å–ø–∏—Å–∫—É —Å—Ç–æ–ª–±—Ü–æ–≤, "
                "–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞–º, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞–º –∏/–∏–ª–∏ —É—Å–ª–æ–≤–∏—è–º. "
                f"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: {user_input}\n\n"
                f"–ü–†–ï–î–´–î–£–©–ò–ô SQL:\n{prev_sql}"
            )
        else:
            question_for_sql = user_input

        sql, df = run_sql_assistant(
            question=question_for_sql,
            database=database,
            allowed_tables=allowed_tables,
            model=model,
            # –ü–µ—Ä–µ–¥–∞—ë–º RAG-–ø–æ–¥—Å–∫–∞–∑–∫–∏ –≤–Ω—É—Ç—Ä—å SQL-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –æ–Ω —ç—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç)
            chroma_path=CHROMA_PATH,
            collection_name=COLLECTION_NAME,
            previous_sql=prev_sql
        )

        # –∂–∏–≤–æ–π –≤—ã–≤–æ–¥
        with st.chat_message("assistant"):
            st.markdown("**–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π SQL:**")
            st.code(sql, language="sql")

            if chart_requested:
                # —Ç–æ–ª—å–∫–æ –≥—Ä–∞—Ñ–∏–∫ (–±–µ–∑ —Ç–∞–±–ª–∏—Ü—ã / CSV)
                st.session_state["viz_active"] = True
                st.session_state["viz_text"] = user_input
                render_auto_chart(df, user_input, key_prefix="main_viz")
            else:
                st.markdown("**–†–µ–∑—É–ª—å—Ç–∞—Ç:**")
                st.dataframe(df.to_pandas(), use_container_width=True)
                csv_bytes = io.BytesIO()
                df.to_pandas().to_csv(csv_bytes, index=False)
                st.download_button("–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç (CSV)", csv_bytes.getvalue(),
                                file_name="result.csv", mime="text/csv")


        # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é: –±–µ–∑ –ø—Ä–µ–≤—å—é-—Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –ø—Ä–æ—Å–∏–ª–∏ –≥—Ä–∞—Ñ–∏–∫ ---
        if chart_requested:
            history_block = (
                "**–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π SQL:**\n"
                f"```sql\n{sql}\n```\n\n"
                "_–ü–æ—Å—Ç—Ä–æ–µ–Ω–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º; —Ç–∞–±–ª–∏—á–Ω–æ–µ –ø—Ä–µ–≤—å—é —Å–∫—Ä—ã—Ç–æ._"
            )
        else:
            try:
                preview_pd: pd.DataFrame = df.head(50).to_pandas()
                try:
                    preview_md = preview_pd.to_markdown(index=False)  # —Ç—Ä–µ–±—É–µ—Ç tabulate
                except Exception:
                    preview_md = "```\n" + preview_pd.to_csv(index=False) + "\n```"
            except Exception:
                preview_md = "_–Ω–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–≤—å—é_"

            history_block = (
                "**–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π SQL:**\n"
                f"```sql\n{sql}\n```\n\n"
                f"**–ü—Ä–µ–≤—å—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–ø–µ—Ä–≤—ã–µ {min(50, len(df))} —Å—Ç—Ä–æ–∫):**\n\n"
                f"{preview_md}"
            )

        st.session_state.messages.append({"role": "assistant", "content": history_block})

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        st.session_state.last_sql = sql
    except Exception as e:
        with st.chat_message("assistant"):
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏/–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ SQL: {e}")
        st.session_state.messages.append({"role": "assistant", "content": f"–û—à–∏–±–∫–∞: {e}"})

else:
    # --- RAG –ø—É—Ç—å ---
    try:
        ctx_docs = retrieve(
            user_input,
            k=5,
            chroma_path=CHROMA_PATH,
            collection_name=COLLECTION_NAME
        )
        st.caption(f"RAG: –Ω–∞–π–¥–µ–Ω–æ —á–∞–Ω–∫–æ–≤ = {len(ctx_docs)}")
        if not ctx_docs:
            st.info("–ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é –∏ –Ω–∞–ª–∏—á–∏–µ .md/.pdf –≤ docs/.")
    except Exception as e:
        with st.chat_message("assistant"):
            st.error(f"–û—à–∏–±–∫–∞ —Ä–µ—Ç—Ä–∏–≤–∞: {e}")
        st.session_state.messages.append({"role": "assistant", "content": f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç: {e}"})
        ctx_docs = []

    context = "\n\n".join([f"[{i+1}] {d['source']}: {d['text'][:300]}..." for i, d in enumerate(ctx_docs)]) or "‚Äî"

    history_msgs = build_history_for_llm(max_turns=6)
    llm_messages = (
        [{"role": "system", "content": system_prompt}]
        + history_msgs
        + [{
            "role": "user",
            "content": (
                f"QUESTION:\n{user_input}\n\n"
                f"CONTEXT:\n{context}\n\n"
                "–ü—Ä–∞–≤–∏–ª–∞: –æ—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –ø–æ CONTEXT. –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî —Ç–∞–∫ –∏ —Å–∫–∞–∂–∏."
            )
        }]
    )

    with st.chat_message("assistant"):
        placeholder = st.empty()
        stream_text = ""
        stream = client.chat.completions.create(
            model=model,
            messages=llm_messages,
            temperature=temperature,
            stream=True,
        )
        for chunk in stream:
            delta = chunk.choices[0].delta.content or ""
            stream_text += delta
            placeholder.markdown(stream_text)

    st.session_state.messages.append({"role": "assistant", "content": stream_text})

    if ctx_docs:
        with st.expander("–ò—Å—Ç–æ—á–Ω–∏–∫–∏"):
            for i, d in enumerate(ctx_docs, 1):
                st.write(f"[{i}] {d['source']} ‚Äî {d['path']}  (score={d['score']:.4f})")

# --- –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º –¥–∞–Ω–Ω—ã–º (–µ—Å–ª–∏ –ø—Ä–æ—Å–∏–ª–∏, –∞ —Ä–µ–∂–∏–º –±—ã–ª –Ω–µ SQL) ---
if chart_requested and mode != "sql":
    try:
        last_sql = get_last_sql()
        if last_sql:
            df_last = _safe_fetch_df_from_sql(last_sql, limit=500)
            if df_last is not None:
                st.session_state["viz_active"] = True
                st.session_state["viz_text"] = user_input
                render_auto_chart(df_last, user_input, key_prefix="main_viz")
    except Exception as e:
        st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
