#!/usr/bin/env python3
"""
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è Plotly —Ç–∞–±–ª–∏—Ü–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º —Å—Ç–∏–ª–µ–π
"""

import plotly.graph_objects as go
import pandas as pd
import numpy as np

# –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å—Ç–∏–ª–µ–π
np.random.seed(42)
data = {
    '–ì–æ—Ä–æ–¥': [f'–ì–æ—Ä–æ–¥_{i}' for i in range(1, 16)],
    '–í—ã—Ä—É—á–∫–∞': np.random.randint(50000, 200000, 15),
    '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': np.random.randint(50, 200, 15),
    '–†–æ—Å—Ç': np.random.uniform(5, 20, 15).round(1),
    '–ü—Ä–∏–±—ã–ª—å': np.random.randint(10000, 50000, 15),
    '–ö–ª–∏–µ–Ω—Ç—ã': np.random.randint(100, 1000, 15)
}

df = pd.DataFrame(data)

# –°–æ–∑–¥–∞–µ–º —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É –¥–ª—è —É—Å–ª–æ–≤–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
def get_advanced_colors(df):
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—É—é —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É"""
    colors = []
    
    for col in df.columns:
        if col == '–í—ã—Ä—É—á–∫–∞':
            # –ì—Ä–∞–¥–∏–µ–Ω—Ç –¥–ª—è –≤—ã—Ä—É—á–∫–∏
            col_colors = []
            max_val = df[col].max()
            min_val = df[col].min()
            for val in df[col]:
                ratio = (val - min_val) / (max_val - min_val)
                if ratio > 0.8:
                    col_colors.append('rgba(255, 0, 0, 0.3)')  # –ö—Ä–∞—Å–Ω—ã–π
                elif ratio > 0.6:
                    col_colors.append('rgba(255, 165, 0, 0.3)')  # –û—Ä–∞–Ω–∂–µ–≤—ã–π
                elif ratio > 0.4:
                    col_colors.append('rgba(255, 255, 0, 0.3)')  # –ñ–µ–ª—Ç—ã–π
                elif ratio > 0.2:
                    col_colors.append('rgba(144, 238, 144, 0.3)')  # –°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π
                else:
                    col_colors.append('rgba(0, 255, 0, 0.3)')  # –ó–µ–ª–µ–Ω—ã–π
            colors.append(col_colors)
        elif col == '–†–æ—Å—Ç':
            # –¶–≤–µ—Ç–∞ –¥–ª—è —Ä–æ—Å—Ç–∞
            col_colors = []
            for val in df[col]:
                if val > 15:
                    col_colors.append('rgba(0, 255, 0, 0.4)')  # –ó–µ–ª–µ–Ω—ã–π
                elif val > 10:
                    col_colors.append('rgba(255, 255, 0, 0.4)')  # –ñ–µ–ª—Ç—ã–π
                else:
                    col_colors.append('rgba(255, 0, 0, 0.4)')  # –ö—Ä–∞—Å–Ω—ã–π
            colors.append(col_colors)
        else:
            # –û–±—ã—á–Ω—ã–µ —è—á–µ–π–∫–∏
            colors.append(['rgba(255, 255, 255, 1)'] * len(df))
    
    return colors

# –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É
fill_colors = get_advanced_colors(df)

# –°–æ–∑–¥–∞–µ–º Plotly —Ç–∞–±–ª–∏—Ü—É
fig = go.Figure(data=[go.Table(
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
    header=dict(
        values=list(df.columns),
        fill_color='rgba(70, 130, 180, 0.8)',  # –°–∏–Ω–∏–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
        font=dict(color='white', size=14, family="Arial", weight='bold'),
        align='center',
        height=45,
        line=dict(color='white', width=2)
    ),
    
    # –Ø—á–µ–π–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
    cells=dict(
        values=[df[col] for col in df.columns],
        fill_color=fill_colors,
        font=dict(color='black', size=12, family="Arial"),
        align='center',
        height=40,
        line=dict(color='white', width=1)
    )
)])

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–∫–µ—Ç–∞
fig.update_layout(
    title={
        'text': "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è Plotly —Ç–∞–±–ª–∏—Ü–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º —Å—Ç–∏–ª–µ–π",
        'x': 0.5,
        'font': {'size': 18, 'color': 'darkblue'}
    },
    margin=dict(l=20, r=20, t=100, b=20),
    height=500,
    width=1000,
    font=dict(family="Arial", size=12),
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–∫—Ä–æ–ª–ª–∞
    xaxis=dict(visible=False),
    yaxis=dict(visible=False),
    
    # –°—Ç–∏–ª–∏ –¥–ª—è —Å–∫—Ä—É–≥–ª–µ–Ω–Ω—ã—Ö —É–≥–ª–æ–≤
    paper_bgcolor='rgba(0,0,0,0)',
    plot_bgcolor='rgba(0,0,0,0)',
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    autosize=True,
    showlegend=False
)

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ HTML —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Å—Ç–∏–ª—è–º–∏
html_content = fig.to_html(
    include_plotlyjs=True,
    div_id="plotly-advanced-table",
    config={
        'displayModeBar': True,
        'displaylogo': False,
        'modeBarButtonsToRemove': ['pan2d', 'lasso2d', 'select2d'],
        'responsive': True
    }
)

# –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ CSS —Å—Ç–∏–ª–∏
advanced_css = """
<style>
/* –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∏–ª–∏ */
#plotly-advanced-table {
    border-radius: 20px !important;
    overflow: hidden !important;
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15) !important;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important;
    padding: 20px !important;
    margin: 20px !important;
}

.plotly .table {
    border-radius: 20px !important;
    overflow: hidden !important;
    background: white !important;
    box-shadow: inset 0 0 20px rgba(0, 0, 0, 0.1) !important;
}

.plotly .table .header {
    border-radius: 20px 20px 0 0 !important;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important;
    color: white !important;
    font-weight: bold !important;
    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.3) !important;
}

.plotly .table .cell {
    border-radius: 0 !important;
    transition: all 0.3s ease !important;
}

.plotly .table .cell:hover {
    background-color: rgba(102, 126, 234, 0.1) !important;
    transform: scale(1.02) !important;
}

/* –°–∫—Ä–æ–ª–ª –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã */
.plotly .table {
    max-height: 450px !important;
    overflow-y: auto !important;
    overflow-x: auto !important;
}

/* –ö–∞—Å—Ç–æ–º–Ω—ã–π —Å–∫—Ä–æ–ª–ª–±–∞—Ä */
.plotly .table::-webkit-scrollbar {
    width: 12px;
    height: 12px;
}

.plotly .table::-webkit-scrollbar-track {
    background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
    border-radius: 6px;
}

.plotly .table::-webkit-scrollbar-thumb {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border-radius: 6px;
    border: 2px solid white;
}

.plotly .table::-webkit-scrollbar-thumb:hover {
    background: linear-gradient(135deg, #5a6fd8 0%, #6a4190 100%);
}

/* –ê–Ω–∏–º–∞—Ü–∏–∏ */
@keyframes fadeIn {
    from { opacity: 0; transform: translateY(20px); }
    to { opacity: 1; transform: translateY(0); }
}

#plotly-advanced-table {
    animation: fadeIn 0.8s ease-out !important;
}

/* –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å */
@media (max-width: 768px) {
    #plotly-advanced-table {
        margin: 10px !important;
        padding: 10px !important;
    }
    
    .plotly .table {
        max-height: 300px !important;
    }
}

/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã */
.plotly .table .header:hover {
    background: linear-gradient(135deg, #5a6fd8 0%, #6a4190 100%) !important;
    transform: scale(1.01) !important;
    transition: all 0.3s ease !important;
}

/* –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã */
.plotly .table {
    border: 3px solid transparent !important;
    background: linear-gradient(white, white) padding-box,
                linear-gradient(135deg, #667eea 0%, #764ba2 100%) border-box !important;
}
</style>
"""

# –û–±—ä–µ–¥–∏–Ω—è–µ–º HTML —Å CSS
final_html = html_content.replace('</head>', f'{advanced_css}</head>')

# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π HTML
with open('test_plotly_advanced_styling.html', 'w', encoding='utf-8') as f:
    f.write(final_html)

print("‚úÖ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è Plotly —Ç–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞!")
print("üìÅ –§–∞–π–ª: test_plotly_advanced_styling.html")

print(f"\nüìä –î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã (–ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫):")
print(df.head().to_string(index=False))

print(f"\nüé® –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Å—Ç–∏–ª–∏:")
print("- ‚úÖ –°–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ —É–≥–ª—ã (border-radius: 20px)")
print("- ‚úÖ –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–µ —Ñ–æ–Ω—ã –∏ –≥—Ä–∞–Ω–∏—Ü—ã")
print("- ‚úÖ –ê–Ω–∏–º–∞—Ü–∏–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥—ã")
print("- ‚úÖ –ö–∞—Å—Ç–æ–º–Ω—ã–π —Å–∫—Ä–æ–ª–ª–±–∞—Ä —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º")
print("- ‚úÖ –≠—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏")
print("- ‚úÖ –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö")
print("- ‚úÖ –¢–µ–Ω–∏ –∏ –≥–ª—É–±–∏–Ω–∞")

print(f"\nüîß CSS –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
print("- border-radius: 20px - —Å–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ —É–≥–ª—ã")
print("- linear-gradient - –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–µ —Ñ–æ–Ω—ã")
print("- box-shadow - —Ç–µ–Ω–∏ –∏ –≥–ª—É–±–∏–Ω–∞")
print("- transition - –ø–ª–∞–≤–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏")
print("- @keyframes - –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏")
print("- @media - –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å")

print(f"\nüì± –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å:")
print("- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ")
print("- –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
print("- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")

print(f"\nüöÄ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:")
print("- –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥")
print("- –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω")
print("- –£–¥–æ–±–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è")
print("- –õ–µ–≥–∫–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è")
print("- –í—ã—Å–æ–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
