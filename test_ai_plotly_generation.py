#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä —Ç–æ–≥–æ, –∫–∞–∫ AI –º–æ–∂–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å Plotly —Ç–∞–±–ª–∏—Ü—ã
"""

import plotly.graph_objects as go
import pandas as pd
import json

# –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
data = {
    '–ì–æ—Ä–æ–¥': ['–ú–æ—Å–∫–≤–∞', '–°–ü–±', '–ö—É—Ä—Å–∫', '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥'],
    '–í—ã—Ä—É—á–∫–∞': [150000, 120000, 85000, 95000, 110000],
    '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': [150, 120, 85, 95, 110],
    '–†–æ—Å—Ç': [15.5, 12.3, 8.7, 9.5, 11.2]
}

df = pd.DataFrame(data)

# –ü—Ä–∏–º–µ—Ä —Ç–æ–≥–æ, –∫–∞–∫ AI –º–æ–∂–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∏–ª–∏ –¥–ª—è Plotly
def ai_generate_plotly_styles(user_request, df):
    """
    –°–∏–º—É–ª—è—Ü–∏—è —Ç–æ–≥–æ, –∫–∞–∫ AI –º–æ–∂–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∏–ª–∏ –¥–ª—è Plotly —Ç–∞–±–ª–∏—Ü—ã
    """
    styles = {
        'header_fill_color': 'rgba(240, 240, 240, 0.8)',
        'cells_fill_color': 'white',
        'font_color': 'black',
        'font_size': 12,
        'conditional_formatting': []
    }
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if '–∫—Ä–∞—Å–Ω' in user_request.lower():
        if '—Å—Ç–æ–ª–±–µ—Ü' in user_request.lower():
            # –í—ã–¥–µ–ª–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü –∫—Ä–∞—Å–Ω—ã–º
            if '–ö—É—Ä—Å–∫' in user_request:
                # –ù–∞–π—Ç–∏ —Å—Ç–æ–ª–±–µ—Ü —Å –ö—É—Ä—Å–∫–æ–º
                for col in df.columns:
                    if '–ö—É—Ä—Å–∫' in df[col].values:
                        styles['conditional_formatting'].append({
                            'column': col,
                            'condition': f'value == "–ö—É—Ä—Å–∫"',
                            'color': 'red'
                        })
        elif '–∑–Ω–∞—á–µ–Ω–∏–µ' in user_request.lower():
            # –í—ã–¥–µ–ª–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –∫—Ä–∞—Å–Ω—ã–º
            if '–≤—ã—à–µ 8' in user_request:
                styles['conditional_formatting'].append({
                    'column': '–†–æ—Å—Ç',
                    'condition': 'value > 8',
                    'color': 'red'
                })
    
    return styles

# –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_requests = [
    "—Å–¥–µ–ª–∞—Ç—å –∫—Ä–∞—Å–Ω—ã–º —Å—Ç–æ–ª–±–µ—Ü —Å –Ω–∞–¥–ø–∏—Å—å—é –ö—É—Ä—Å–∫",
    "–≤—ã–¥–µ–ª–∏—Ç—å –∫—Ä–∞—Å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è –≤—ã—à–µ 8",
    "—Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –∫—Ä–∞—Å–Ω–æ–π",
    "–¥–æ–±–∞–≤–∏—Ç—å —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫"
]

print("ü§ñ –ü—Ä–∏–º–µ—Ä—ã —Ç–æ–≥–æ, –∫–∞–∫ AI –º–æ–∂–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å Plotly —Ç–∞–±–ª–∏—Ü—ã:")
print("=" * 60)

for i, request in enumerate(user_requests, 1):
    print(f"\n{i}. –ó–∞–ø—Ä–æ—Å: '{request}'")
    
    # AI –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç–∏–ª–∏
    styles = ai_generate_plotly_styles(request, df)
    
    print(f"   AI –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç–∏–ª–∏:")
    print(f"   {json.dumps(styles, indent=2, ensure_ascii=False)}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, –∫–∞–∫ —ç—Ç–æ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –≤ Plotly
    if styles['conditional_formatting']:
        print(f"   ‚Üí Plotly –∫–æ–¥:")
        for rule in styles['conditional_formatting']:
            print(f"     fill_color = ['red' if {rule['condition']} else 'white' for val in df['{rule['column']}']]")
    else:
        print(f"   ‚Üí Plotly –∫–æ–¥: fill_color='white'")

print(f"\nüéØ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –¥–ª—è AI:")
print("=" * 60)
print("‚úÖ –ü—Ä–æ—Å—Ç—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–º–µ—Å—Ç–æ —Å–ª–æ–∂–Ω–æ–≥–æ CSS")
print("‚úÖ –í—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ —É—Å–ª–æ–≤–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π")
print("‚úÖ –ú–µ–Ω—å—à–µ –æ—à–∏–±–æ–∫ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
print("‚úÖ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏–∑ –∫–æ—Ä–æ–±–∫–∏")

print(f"\nüìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:")
print("=" * 60)
print("HTML + CSS (—Ç–µ–∫—É—â–∞—è —Å–∏—Å—Ç–µ–º–∞):")
print("- ‚ùå –°–ª–æ–∂–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã")
print("- ‚ùå –£—Å–ª–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤ CSS")
print("- ‚ùå –û—à–∏–±–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
print("- ‚ùå –°—Ç–∞—Ç–∏—á–Ω–æ—Å—Ç—å")

print("\nPlotly (–ø—Ä–µ–¥–ª–∞–≥–∞–µ–º–∞—è —Å–∏—Å—Ç–µ–º–∞):")
print("- ‚úÖ –ü—Ä–æ—Å—Ç—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
print("- ‚úÖ –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏")
print("- ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ")
print("- ‚úÖ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")

print(f"\nüîß –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ app.py:")
print("=" * 60)
print("""
# –í–º–µ—Å—Ç–æ —Å–ª–æ–∂–Ω–æ–≥–æ CSS –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:
def _generate_plotly_table(df, style_meta):
    fig = go.Figure(data=[go.Table(
        header=dict(
            values=list(df.columns),
            fill_color=style_meta.get('header_fill_color', 'lightgray')
        ),
        cells=dict(
            values=[df[col] for col in df.columns],
            fill_color=style_meta.get('cells_fill_color', 'white')
        )
    )])
    return fig

# AI –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
table_style = {
    'header_fill_color': 'rgba(240, 240, 240, 0.8)',
    'cells_fill_color': 'white',
    'conditional_formatting': [
        {'column': '–†–æ—Å—Ç', 'condition': 'value > 8', 'color': 'red'}
    ]
}
""")

print(f"\nüöÄ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:")
print("=" * 60)
print("–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ Plotly —Ç–∞–±–ª–∏—Ü—ã —Ä–µ—à–∏—Ç –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ø—Ä–æ–±–ª–µ–º:")
print("- AI –±—É–¥–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
print("- –ú–µ–Ω—å—à–µ –æ—à–∏–±–æ–∫ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
print("- –ë–æ–ª—å—à–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
print("- –ü—Ä–æ—â–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ")
